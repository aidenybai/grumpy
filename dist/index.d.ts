declare class Grumpy extends Map {
    private _array;
    private _keyArray;
    constructor(iterable?: any[]);
    array(): any[];
    clone(): Grumpy;
    concat(...groups: Grumpy[]): Grumpy;
    cut(fn: Function, thisArg?: any): Grumpy[];
    delete(key: any, time?: number): any;
    each(fn: any, thisArg?: any): Grumpy;
    equals(group: any): boolean;
    every(fn: Function, thisArg?: any): boolean;
    filter(fn: Function, thisArg?: any): Grumpy;
    find(fn: Function, thisArg?: any): any;
    first(count?: number): any;
    firstKey(count?: number): any;
    flatMap(fn: Function, thisArg?: any): Grumpy;
    keyArray(): any[];
    last(count?: number): any;
    lastKey(count?: number): any;
    map(fn: Function, thisArg?: any): any[];
    mapValues(fn: Function, thisArg?: any): any[];
    random(count?: number): any;
    randomKey(count?: number): any;
    reduce(fn: Function, initialValue?: any): any;
    set(key: any, value: any, time?: number): any;
    shuffle(): Grumpy;
    sift(fn: Function, thisArg?: any): number;
    some(fn: Function, thisArg?: any): boolean;
    sort(compareFunction?: any): Grumpy;
    sorted(compareFunction?: any): Grumpy;
}
export default Grumpy;
